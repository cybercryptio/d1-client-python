# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import storage_pb2 as storage__pb2


class StorageStub(object):
    """/ Service for managing stored objects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Store = channel.unary_unary(
                '/d1.storage.Storage/Store',
                request_serializer=storage__pb2.StoreRequest.SerializeToString,
                response_deserializer=storage__pb2.StoreResponse.FromString,
                )
        self.Retrieve = channel.unary_unary(
                '/d1.storage.Storage/Retrieve',
                request_serializer=storage__pb2.RetrieveRequest.SerializeToString,
                response_deserializer=storage__pb2.RetrieveResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/d1.storage.Storage/Update',
                request_serializer=storage__pb2.UpdateRequest.SerializeToString,
                response_deserializer=storage__pb2.UpdateResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/d1.storage.Storage/Delete',
                request_serializer=storage__pb2.DeleteRequest.SerializeToString,
                response_deserializer=storage__pb2.DeleteResponse.FromString,
                )


class StorageServicer(object):
    """/ Service for managing stored objects.
    """

    def Store(self, request, context):
        """/ Store an object in encrypted form.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """/ Fetches a previously stored object and returns the plaintext content.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """/ Store an object in encrypted form, replacing the data previously stored.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """/ Deletes a previously stored object.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=storage__pb2.StoreRequest.FromString,
                    response_serializer=storage__pb2.StoreResponse.SerializeToString,
            ),
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=storage__pb2.RetrieveRequest.FromString,
                    response_serializer=storage__pb2.RetrieveResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=storage__pb2.UpdateRequest.FromString,
                    response_serializer=storage__pb2.UpdateResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=storage__pb2.DeleteRequest.FromString,
                    response_serializer=storage__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'd1.storage.Storage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Storage(object):
    """/ Service for managing stored objects.
    """

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.storage.Storage/Store',
            storage__pb2.StoreRequest.SerializeToString,
            storage__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.storage.Storage/Retrieve',
            storage__pb2.RetrieveRequest.SerializeToString,
            storage__pb2.RetrieveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.storage.Storage/Update',
            storage__pb2.UpdateRequest.SerializeToString,
            storage__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.storage.Storage/Delete',
            storage__pb2.DeleteRequest.SerializeToString,
            storage__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
