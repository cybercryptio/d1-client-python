# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import authn_pb2 as authn__pb2


class AuthnStub(object):
    """Service for user management.
    > NOTE: This API is only exposed when the D1 service is configured to use the standalone ID provider.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/d1.authn.Authn/CreateUser',
                request_serializer=authn__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=authn__pb2.CreateUserResponse.FromString,
                )
        self.LoginUser = channel.unary_unary(
                '/d1.authn.Authn/LoginUser',
                request_serializer=authn__pb2.LoginUserRequest.SerializeToString,
                response_deserializer=authn__pb2.LoginUserResponse.FromString,
                )
        self.RemoveUser = channel.unary_unary(
                '/d1.authn.Authn/RemoveUser',
                request_serializer=authn__pb2.RemoveUserRequest.SerializeToString,
                response_deserializer=authn__pb2.RemoveUserResponse.FromString,
                )
        self.CreateGroup = channel.unary_unary(
                '/d1.authn.Authn/CreateGroup',
                request_serializer=authn__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=authn__pb2.CreateGroupResponse.FromString,
                )
        self.AddUserToGroups = channel.unary_unary(
                '/d1.authn.Authn/AddUserToGroups',
                request_serializer=authn__pb2.AddUserToGroupsRequest.SerializeToString,
                response_deserializer=authn__pb2.AddUserToGroupsResponse.FromString,
                )
        self.RemoveUserFromGroups = channel.unary_unary(
                '/d1.authn.Authn/RemoveUserFromGroups',
                request_serializer=authn__pb2.RemoveUserFromGroupsRequest.SerializeToString,
                response_deserializer=authn__pb2.RemoveUserFromGroupsResponse.FromString,
                )


class AuthnServicer(object):
    """Service for user management.
    > NOTE: This API is only exposed when the D1 service is configured to use the standalone ID provider.
    """

    def CreateUser(self, request, context):
        """Creates a new user.
        This call can fail if the auth storage cannot be reached, in which case an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Logs in an existing user, returning a User Access Token and an expiry time.
        This call can fail if the caller provides the wrong credentials or if the auth storage cannot be reached,
        in which case an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUser(self, request, context):
        """Deletes an existing user.
        This call can fail if the user does not exist,
        or if the auth storage cannot be reached, in which case an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Creates a new group with the requested scopes. The caller is added to the group.
        This call can fail if the auth storage cannot be reached,
        in which case an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUserToGroups(self, request, context):
        """Adds a user to one or more groups.
        This call can fail if the auth storage cannot be reached,
        in which case an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUserFromGroups(self, request, context):
        """Removes a user from one or more groups.
        This call can fail if the auth storage cannot be reached,
        in which case an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthnServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=authn__pb2.CreateUserRequest.FromString,
                    response_serializer=authn__pb2.CreateUserResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=authn__pb2.LoginUserRequest.FromString,
                    response_serializer=authn__pb2.LoginUserResponse.SerializeToString,
            ),
            'RemoveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUser,
                    request_deserializer=authn__pb2.RemoveUserRequest.FromString,
                    response_serializer=authn__pb2.RemoveUserResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=authn__pb2.CreateGroupRequest.FromString,
                    response_serializer=authn__pb2.CreateGroupResponse.SerializeToString,
            ),
            'AddUserToGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUserToGroups,
                    request_deserializer=authn__pb2.AddUserToGroupsRequest.FromString,
                    response_serializer=authn__pb2.AddUserToGroupsResponse.SerializeToString,
            ),
            'RemoveUserFromGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUserFromGroups,
                    request_deserializer=authn__pb2.RemoveUserFromGroupsRequest.FromString,
                    response_serializer=authn__pb2.RemoveUserFromGroupsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'd1.authn.Authn', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Authn(object):
    """Service for user management.
    > NOTE: This API is only exposed when the D1 service is configured to use the standalone ID provider.
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.authn.Authn/CreateUser',
            authn__pb2.CreateUserRequest.SerializeToString,
            authn__pb2.CreateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.authn.Authn/LoginUser',
            authn__pb2.LoginUserRequest.SerializeToString,
            authn__pb2.LoginUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.authn.Authn/RemoveUser',
            authn__pb2.RemoveUserRequest.SerializeToString,
            authn__pb2.RemoveUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.authn.Authn/CreateGroup',
            authn__pb2.CreateGroupRequest.SerializeToString,
            authn__pb2.CreateGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUserToGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.authn.Authn/AddUserToGroups',
            authn__pb2.AddUserToGroupsRequest.SerializeToString,
            authn__pb2.AddUserToGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUserFromGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/d1.authn.Authn/RemoveUserFromGroups',
            authn__pb2.RemoveUserFromGroupsRequest.SerializeToString,
            authn__pb2.RemoveUserFromGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
